{"cells":[{"metadata":{"trusted":true},"cell_type":"code","source":"import random\nnum_doors = 100\n\n\n\n# Helper function, to print FFFFFFTFFFF, instead of False, False, False, etc.\ndef p(arr):\n    ret = \"\"\n    if(isinstance(arr, list)):\n        for element in arr:\n            if(element == None):\n                ret += \".\"\n            elif(element):\n                ret += \"T\"\n            else:\n                ret += \"F\"\n        return ret\n    else:\n        if(arr):\n            ret += \"T\"\n        else:\n            ret += \"F\"\n    return ret\n       \n\n#\n# Initialise all doors to False. \n#\ndoors = []\nfor door in range(num_doors):\n    doors.append(False)\n\n\n    \n#\n# Set one door as winner, at random\n#\ndoors[random.randint(0, num_doors - 1)] = True\n","execution_count":1,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"print(f\"All Doors: {p(doors)}\")\nprint()\n\n#\n# Make our selection, at random.\n#\n\nselection_index = random.randint(0, num_doors-1)\nselection = doors.pop(selection_index)\n\nprint(f\"My Selection: Door {selection_index-1}: {p(selection)}\")\nprint(f\"Other doors:  {p(doors)}\")\n\n#\n# The reveal!\n# For the Other Doors, open all but one door, but never opening a winning door.\n#\n\ndoors_to_remove = len(doors) - 1\nfor door in range(0,len(doors)):\n    if(doors[door]):\n        # Do not remove winning door\n        pass\n    elif(doors_to_remove):\n        # Remov losing door\n        doors[door] = None\n        doors_to_remove -= 1\n        \n\n#\n# Show the result\n#\n\nprint()\nprint(\"The reveal!\")\nprint(f\"Other doors: {p(doors)}\")","execution_count":2,"outputs":[{"output_type":"stream","text":"All Doors: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\nMy Selection: Door 65: F\nOther doors:  FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\nThe reveal!\nOther doors: ................................................................T..................................\n","name":"stdout"}]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.6.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":2}